<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[拖拉插件]]></title>
    <url>%2F2019%2F03%2F13%2F%E6%8B%96%E6%8B%89%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[对于js的新手对交互效果的研究一直都处于哪来用节点,本文通过对拖拉的交互研究,来试探下js的交互方式 拖拉事件在网页交中,拖拉事件是非常常见的,如对列表进行排序等操作,如果用操作事件就会非常人性化.那么交互事件分为哪些阶段呢 拖拉 DOM需要拖拉的目标一共有三个事件: drag 拖拉过程中,持续触发的事件(相隔几百毫秒) dragstart 开始拖拉时触发,可通过回调函数中,event的target属性来获取拖拉的 DOM 信息 dragend 结束拖拉时候触发, target是拖拉的 DOM 信息 目标 DOM dragenter 当拖拉 DOM 进入目标 DOM 时触发,target属性是当前目标 DOM dragover 进入目标 DOM 上方,持续触发,target节点是当前 DOM dragleave 离开目标 DOM 时触发,target节点是当前 DOM drop 被拖拉的 DOM 释放到目标 DOM 时触发,target节点是当前 DOM 简单的拖拉事件本代码来自阮一峰的教程 参考 拖拉事件 (阮一峰) 转载请说明出处 http://idcpj.github.io/2019/03/13/拖拉插件/]]></content>
  </entry>
  <entry>
    <title><![CDATA[生成不同压缩比例的图片]]></title>
    <url>%2F2019%2F02%2F19%2F%E7%94%9F%E6%88%90%E4%B8%8D%E5%90%8C%E5%8E%8B%E7%BC%A9%E6%AF%94%E4%BE%8B%E7%9A%84%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[适用于需要 ios 或者安卓对同张图片需要进行1倍,2倍,3倍比例的缩放.或者指定缩放倍数 安装项目地址 :https://github.com/idcpj/zoom_img python3 pip install Image 安装测试12&gt; cd test&gt; python create_img.py 使用1python create_img.py 缩放可以使用使用分数形式12&gt; 请输入缩小倍数&gt; 1/9 转载请说明出处 http://idcpj.github.io/2019/02/19/生成不同压缩比例的图片/]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>android</tag>
        <tag>移动端</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3动画]]></title>
    <url>%2F2019%2F02%2F15%2Fcss3%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[css3 的出现可以让我们不依赖 javascript 做一些相对复杂的动画 transition最简单的入门动画在需要作用的 DOM 上添加 transition: 1s;实例: 指定长宽的动画时间123.demo&#123; transition: 1s height, 1s width;&#125; 实例: 指定延迟时间 (transition-delay)123.demo&#123; transition: 1s height, 1s 1s width; &#125; delay 可以指定动画的运行顺序 指定状态变化速度 (transition-timing-function)默认为 ease 123.demo&#123; transition: 1s [widht|height] ease;&#125; ease:逐渐放慢 (默认) linear：匀速 ease-in：加速 ease-out：减速 cubic-bezier函数：自定义速度模式 cubic-bezier 可用cubic-bezier 工具进行调整 123.demo&#123; transition: 1s height cubic-bezier(.87,-0.51,.84,.09);&#125; 完整表达式12345678910.demo&#123; transition: 1s [1s] [height] [ease];&#125;.demo&#123; transition-property: height; transition-duration: 1s; transition-delay: 1s; transition-timing-function: ease;&#125; 注意事项 IE10+ ,chrome 等都支持 如何 长宽属性是auto,则无法计算出中间状态 transition 需要时间出发,无法在加载网页时候自动发生 transition 只有开始和结束两种状态 transition 一条transition规则，只能定义一个属性的变化，不能涉及多个属性 各个属性的动画效果 CSS Animation基本用法123456789101112131415div:hover &#123; animation: 1s rainbow; &#125; @keyframes rainbow &#123; 0% &#123; background: #c00; &#125; 50% &#123; background: orange; &#125; 100% &#123; background: yellowgreen; &#125; &#125; 可以无限制播放animation: 1s rainbow infinite; 指定播放次数animation: 1s rainbow 3; 动画保持结束状态animation: 1s rainbow forwards; 播放方向animation: 1s rainbow 3 normal; animation的各项属性12345678910111213div:hover &#123; animation: 1s 1s rainbow linear 3 forwards normal;&#125;div:hover &#123; animation-name: rainbow; animation-duration: 1s; animation-timing-function: linear; animation-delay: 1s; animation-fill-mode:forwards; animation-direction: normal; animation-iteration-count: 3;&#125; keyframes的写法基础形式12345@keyframes rainbow &#123; 0% &#123; background: #c00 &#125; 50% &#123; background: orange &#125; 100% &#123; background: yellowgreen &#125;&#125; 0% 代表 form 100% to12345@keyframes rainbow &#123; from &#123; background: #c00 &#125; 50% &#123; background: orange &#125; to &#123; background: yellowgreen &#125;&#125; 自动推算中间状态12345678@keyframes rainbow &#123; 50% &#123; background: orange &#125; to &#123; background: yellowgreen &#125;&#125;@keyframes rainbow &#123; to &#123; background: yellowgreen &#125;&#125; 多个状态写入一行1234@keyframes pound &#123; from，to &#123; transform: none; &#125; 50% &#123; transform: scale(1.2); &#125;&#125; 参考 CSS动画简介 (阮一峰) 转载请说明出处 http://idcpj.github.io/2019/02/15/css3动画/]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yaml配置文件用法]]></title>
    <url>%2F2019%2F02%2F14%2Fyaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[介绍 yaml 的一些基本用法 语法规则 大小写敏感 缩进时不允许使用Tab键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 表示注释，从这个字符一直到行尾，都会被解析器忽略。 支持数据格式 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） 纯量（scalars）：单个的、不可再分的值 对象animal: pets ⬇ { animal: &#39;pets&#39; }采用行内对象hash: { name: Steve, foo: bar } ⬇ { hash: { name: &#39;Steve&#39;, foo: &#39;bar&#39; } } 数组 用连线开头的表示数组 123- Cat- Dog- Goldfish ⬇[ &#39;Cat&#39;, &#39;Dog&#39;, &#39;Goldfish&#39; ] 多为数组 1234- - Cat - Dog - Goldfish ⬇[ [ &#39;Cat&#39;, &#39;Dog&#39;, &#39;Goldfish&#39; ] ] 数组也可以采用行内表示法animal: [Cat, Dog]⬇{ animal: [ &#39;Cat&#39;, &#39;Dog&#39; ] } 复合结构123456789languages: - Ruby - Perl - Python websites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org ⬇12345678910111213&#123; languages: [ &apos;Ruby&apos;, &apos;Perl&apos;, &apos;Python&apos; ], websites: &#123; YAML: &apos;yaml.org&apos;, Ruby: &apos;ruby-lang.org&apos;, Python: &apos;python.org&apos;, Perl: &apos;use.perl.org&apos; &#125;&#125; 纯量不可再分的元素 字符串 布尔值 isSet: true -&gt; js {isSet: true } 整数 浮点数 number: 12.30 -&gt;js {number:12.30} Null parent: ~ -&gt; {parent:null} 时间 iso8601: 2001-12-14t21:59:43.10-05:00 -&gt;js { iso8601: new Date(&#39;2001-12-14t21:59:43.10-05:00&#39;) } 日期 date: 1976-07-31 -&gt; js { date: new Date(&#39;1976-07-31&#39;) } 字符串 双引号不会对特殊字符转义12s1: &apos;内容\n字符串&apos;s2: &quot;内容\n字符串&quot; ⬇{ s1: &#39;内容\\n字符串&#39;, s2: &#39;内容\n字符串&#39; } 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格123str: 这是一段 多行 字符串 ⬇{ str: &#39;这是一段 多行 字符串&#39; } 多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行123456this: | Foo Barthat: &gt; Foo Bar ⬇{ this: &#39;Foo\nBar\n&#39;, that: &#39;Foo Bar\n&#39; } +表示保留文字块末尾的换行，-表示删除字符串末尾的换行123456s1: | Foos2: |+ Foos3: |- Fo ⬇1&#123; s1: &apos;Foo\n&apos;, s2: &apos;Foo\n\n\n&apos;, s3: &apos;Foo&apos; &#125; 强制转换数据类型使用两个 !!12e: !!str 123f: !!str true ⬇{e:&quot;123&quot;,f:&quot;true&quot;} 转载请说明出处 http://idcpj.github.io/2019/02/14/yaml配置文件用法/]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何写一篇hexo的文章]]></title>
    <url>%2F2019%2F02%2F13%2F%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E7%AF%87hexo%E7%9A%84%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[介绍如何用 markdown 的语法结合 hexo 的标签 写文章 文章截断在需要截断的地方使用&lt;!--more--&gt; 创建hexo的hexo new [post] 文章标题 设置Front-matter在文章的 --- 分割的区域就是 Front-matter 可设置如下参数 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签 （不适用于分页） categories 分类 （不适用于分页） permalink 覆盖文章网址 donate 开启打赏 分类和标签12345categories:- Diarytags:- PS3- Games 引用123&#123;% blockquote Seth Godin %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; 显示:Every interaction is both precious and an opportunity to delight. Seth Godin 函数演示123&#123; % codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; 显示:Array.map1array.map(callback[, thisArg]) iframe{ % iframe url [width] [height] % } Image{ % img [class names] /path/to/image [width] [height] [title text [alt text]] %} 镶嵌运行代码推荐网站 jsrun 方式1:{ % iframe //jsrun.net/8XXKp/embedded/all/light/ %} 方式2:&lt;script async src=&quot;//jsrun.net/9XXKp/embed/all/light/&quot;&gt;&lt;/script&gt; 直接插入 HTML 标签&lt;b&gt;b&lt;b&gt;b 参考资料的书写方式1.[doc name (英文)](http://www.demo.com)eg: 1. LDAP 轻型目录访问协议 wiki (英文文) 转载请说明出处 http://idcpj.github.io/2019/02/13/如何写一篇hexo的文章/]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
